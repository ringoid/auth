AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Auth Service Stack


Mappings:
  LogMap:
    PapertrailLog:
      stage: "logs7.papertrailapp.com:23213"
      test: "logs7.papertrailapp.com:16637"
      prod: "logs7.papertrailapp.com:16747"

  UserProfileTableCUMap:
    test:
      wcumax: 1
      wcucrt: 1
      wcumin: 1
      rcumax: 1
      rcucrt: 1
      rcumin: 1
    stage:
      wcumax: 1
      wcucrt: 1
      wcumin: 1
      rcumax: 1
      rcucrt: 1
      rcumin: 1
    prod:
      wcumax: should-be-prod-value
      wcucrt: should-be-prod-value
      wcumin: should-be-prod-value
      rcumax: should-be-prod-value
      rcucrt: should-be-prod-value
      rcumin: should-be-prod-value

  UserSettingsTableCUMap:
    test:
      wcumax: 1
      wcucrt: 1
      wcumin: 1
      rcumax: 1
      rcucrt: 1
      rcumin: 1
    stage:
      wcumax: 1
      wcucrt: 1
      wcumin: 1
      rcumax: 1
      rcucrt: 1
      rcumin: 1
    prod:
      wcumax: should-be-prod-value
      wcucrt: should-be-prod-value
      wcumin: should-be-prod-value
      rcumax: should-be-prod-value
      rcucrt: should-be-prod-value
      rcumin: should-be-prod-value

  FunctionName:
    WarmUpFunction:
      test: test-warm-up-auth
      stage: stage-warm-up-auth
      prod: prod-warm-up-auth
    CreateAuthFunction:
      test: test-create-auth
      stage: stage-create-auth
      prod: prod-create-auth
    UpdateSettingsAuthFunction:
      test: test-update-settings-auth
      stage: stage-update-settings-auth
      prod: prod-update-settings-auth
    GetSettingsAuthFunction:
      test: test-get-settings-auth
      stage: stage-get-settings-auth
      prod: prod-get-settings-auth
    InternalGetUserIdFunction:
      test: test-internal-validate-token-auth
      stage: stage-internal-validate-token-auth
      prod: prod-internal-validate-token-auth
    LogoutAuthFunction:
      test: test-logout-auth
      stage: stage-logout-auth
      prod: prod-logout-auth
    InternalCleanDbAuthFunction:
      test: test-internal-clean-db-auth
      stage: stage-internal-clean-db-auth
      prod: prod-internal-clean-db-auth
    DeleteAuthFunction:
      test: test-delete-user-auth
      stage: stage-delete-user-auth
      prod: prod-delete-user-auth

Parameters:
  Env:
    Type: String
    Default: stage
    AllowedValues:
      - test
      - stage
      - prod
    Description: Env name
  CloudWatchNewUserWasCreatedMetricName:
    Type: String
    Default: NewUserWasCreated
  CloudWatchNewUserCallDeletedMetricName:
    Type: String
    Default: UserCallDeleteHimself


Globals:
    Function:
        Timeout: 300
        MemorySize: 512
        Runtime: go1.x
        Environment:
          Variables:
            ENV: !Ref Env
            PAPERTRAIL_LOG_ADDRESS: !FindInMap [LogMap, PapertrailLog, !Ref Env]
            DELIVERY_STREAM:
              Fn::ImportValue:
                !Join [ "-", [ !Ref Env, DeliveryStreamExportName] ]
            USER_PROFILE_TABLE: !Ref UserProfileTable
            USER_SETTINGS_TABLE: !Ref UserSettingsTable
            COMMON_STREAM:
              Fn::ImportValue:
                !Join [ "-", [ !Ref Env, CommonEventStreamExportName] ]
            INTERNAL_STREAM_NAME:
              Fn::ImportValue:
                !Join [ "-", [ !Ref Env, InternalEventStreamExportName] ]
            NEED_WARM_UP_LAMBDA_NAMES: !Join [ ",", [ !FindInMap [FunctionName, DeleteAuthFunction, !Ref Env], !FindInMap [FunctionName, CreateAuthFunction, !Ref Env], !FindInMap [FunctionName, UpdateSettingsAuthFunction, !Ref Env], !FindInMap [FunctionName, GetSettingsAuthFunction, !Ref Env], !FindInMap [FunctionName, InternalGetUserIdFunction, !Ref Env], !FindInMap [FunctionName, LogoutAuthFunction, !Ref Env] ]]
            CLOUD_WATCH_NEW_USER_WAS_CREATED: !Ref CloudWatchNewUserWasCreatedMetricName
            CLOUD_WATCH_USER_DELETE_HIMSELF: !Ref CloudWatchNewUserCallDeletedMetricName
            BASE_CLOUD_WATCH_NAMESPACE: !Join [ "-", [ !Ref Env, auth, service] ]
        Tags:
          Company: Ringoid
          Service: auth
          Environment: !Ref Env

Resources:

  ScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - "application-autoscaling.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action:
                  - "dynamodb:DescribeTable"
                  - "dynamodb:UpdateTable"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:SetAlarmState"
                  - "cloudwatch:DeleteAlarms"
                Resource: "*"

  InternalCleanDbAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, InternalCleanDbAuthFunction, !Ref Env]
      Handler: clean
      CodeUri: ./clean.zip
      Description: Clean DB auth function
      Policies:
        - AWSLambdaFullAccess
        - AmazonDynamoDBFullAccess

  WarmUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, WarmUpFunction, !Ref Env]
      Handler: warm_up
      CodeUri: ./warmup-auth.zip
      Description: WarmUp auth function
      Policies:
        - AWSLambdaFullAccess

  ScheduledWarmUpFunctionRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Scheduled WarmUp lambda function rule
      ScheduleExpression: rate(8 minutes)
      State: ENABLED
      Name: !Join [ "-", [ !Ref Env, warm_up_function_rule] ]
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - WarmUpFunction
              - Arn
          Id: ScheduledWarmUpFunctionRuleId

  PermissionForEventsToInvokeWarmUpFunction:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WarmUpFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - ScheduledWarmUpFunctionRule
          - Arn

  CreateAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, CreateAuthFunction, !Ref Env]
      Handler: create
      CodeUri: ./create-auth.zip
      Description: Create user profile auth function
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonKinesisFirehoseFullAccess
        - SecretsManagerReadWrite
        - AmazonKinesisFullAccess
        - CloudWatchFullAccess
      Events:
        CompleteEvent:
          Type: Api
          Properties:
            Path: /create_profile
            Method: post

  UpdateSettingsAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, UpdateSettingsAuthFunction, !Ref Env]
      Handler: update_settings
      CodeUri: ./update-settings-auth.zip
      Description: Update user's settings function
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonKinesisFirehoseFullAccess
        - SecretsManagerReadWrite
        - AmazonKinesisFullAccess
      Events:
        CompleteEvent:
          Type: Api
          Properties:
            Path: /update_settings
            Method: post

  GetSettingsAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, GetSettingsAuthFunction, !Ref Env]
      Handler: get_settings
      CodeUri: ./get-settings-auth.zip
      Description: Get user's settings function
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonKinesisFirehoseFullAccess
        - SecretsManagerReadWrite
        - AmazonKinesisFullAccess
      Events:
        CompleteEvent:
          Type: Api
          Properties:
            Path: /get_settings
            Method: get

  InternalGetUserIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, InternalGetUserIdFunction, !Ref Env]
      Handler: internal_get_user_id
      CodeUri: ./internal-getuserid-auth.zip
      Description: Internal function to get userId and validate AccessToken
      Policies:
        - AmazonDynamoDBFullAccess
        - SecretsManagerReadWrite
        - AmazonKinesisFullAccess

  DeleteAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, DeleteAuthFunction, !Ref Env]
      Handler: delete
      CodeUri: ./delete.zip
      Description: Delete user auth function
      Policies:
        - AmazonDynamoDBFullAccess
        - SecretsManagerReadWrite
        - AmazonKinesisFirehoseFullAccess
        - AmazonKinesisFullAccess
        - CloudWatchFullAccess
      Events:
        StartEvent:
          Type: Api
          Properties:
            Path: /delete
            Method: post

  UserProfileTable:
    Type: AWS::DynamoDB::Table
    Properties:
          TableName: !Join [ "-", [ !Ref Env, Auth, UserProfileTable] ]
          AttributeDefinitions:
            -
              AttributeName: user_id
              AttributeType: S
          KeySchema:
            -
              AttributeName: user_id
              KeyType: HASH

          ProvisionedThroughput:
            ReadCapacityUnits: !FindInMap [UserProfileTableCUMap, !Ref Env, rcucrt]
            WriteCapacityUnits: !FindInMap [UserProfileTableCUMap, !Ref Env, wcucrt]

          Tags:
            - Key: Company
              Value: Ringoid
            - Key: Service
              Value: auth
            - Key: Environment
              Value: !Ref Env

  UserProfileTableWriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: UserProfileTable
    Properties:
      MaxCapacity: !FindInMap [UserProfileTableCUMap, !Ref Env, wcumax]
      MinCapacity: !FindInMap [UserProfileTableCUMap, !Ref Env, wcumin]
      ResourceId: !Join
        - /
        - - table
          - !Join [ "-", [ !Ref Env, Auth, UserProfileTable] ]
      RoleARN: !GetAtt
        - ScalingRole
        - Arn
      ScalableDimension: "dynamodb:table:WriteCapacityUnits"
      ServiceNamespace: dynamodb

  UserProfileTableReadCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: UserProfileTable
    Properties:
      MaxCapacity: !FindInMap [UserProfileTableCUMap, !Ref Env, rcumax]
      MinCapacity: !FindInMap [UserProfileTableCUMap, !Ref Env, rcumin]
      ResourceId: !Join
        - /
        - - table
          - !Join [ "-", [ !Ref Env, Auth, UserProfileTable] ]
      RoleARN: !GetAtt
        - ScalingRole
        - Arn
      ScalableDimension: "dynamodb:table:ReadCapacityUnits"
      ServiceNamespace: dynamodb

  UserProfileTableWriteScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: UserProfileTable
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: UserProfileTableWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization

  UserProfileTableReadScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: UserProfileTable
    Properties:
      PolicyName: ReadAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: UserProfileTableReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization


  UserSettingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
          TableName: !Join [ "-", [ !Ref Env, Auth, UserSettings] ]
          AttributeDefinitions:
            -
              AttributeName: user_id
              AttributeType: S
          KeySchema:
            -
              AttributeName: user_id
              KeyType: HASH

          ProvisionedThroughput:
            ReadCapacityUnits: !FindInMap [UserSettingsTableCUMap, !Ref Env, rcucrt]
            WriteCapacityUnits: !FindInMap [UserSettingsTableCUMap, !Ref Env, wcucrt]
          Tags:
            - Key: Company
              Value: Ringoid
            - Key: Service
              Value: auth
            - Key: Environment
              Value: !Ref Env

  UserSettingsTableWriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: UserSettingsTable
    Properties:
      MaxCapacity: !FindInMap [UserSettingsTableCUMap, !Ref Env, wcumax]
      MinCapacity: !FindInMap [UserSettingsTableCUMap, !Ref Env, wcumin]
      ResourceId: !Join
        - /
        - - table
          - !Join [ "-", [ !Ref Env, Auth, UserSettings] ]
      RoleARN: !GetAtt
        - ScalingRole
        - Arn
      ScalableDimension: "dynamodb:table:WriteCapacityUnits"
      ServiceNamespace: dynamodb

  UserSettingsTableReadCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: UserSettingsTable
    Properties:
      MaxCapacity: !FindInMap [UserSettingsTableCUMap, !Ref Env, rcumax]
      MinCapacity: !FindInMap [UserSettingsTableCUMap, !Ref Env, rcumin]
      ResourceId: !Join
        - /
        - - table
          - !Join [ "-", [ !Ref Env, Auth, UserSettings] ]
      RoleARN: !GetAtt
        - ScalingRole
        - Arn
      ScalableDimension: "dynamodb:table:ReadCapacityUnits"
      ServiceNamespace: dynamodb

  UserSettingsTableWriteScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: UserSettingsTable
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: UserSettingsTableWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization

  UserSettingsTableReadScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: UserSettingsTable
    Properties:
      PolicyName: ReadAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: UserSettingsTableReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization

Outputs:
  InternalGetUserIdFunctionExport:
    Value: !FindInMap [FunctionName, InternalGetUserIdFunction, !Ref Env]
    Export:
      Name: !Join [ "-", [ !Ref Env, InternalGetUserIdFunctionExport] ]
  InternalCleanDbAuthFunctionExport:
    Value: !FindInMap [FunctionName, InternalCleanDbAuthFunction, !Ref Env]
    Export:
      Name: !Join [ "-", [ !Ref Env, InternalCleanDbAuthFunctionExport] ]
