AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Auth Service Stack


Mappings:
  LogMap:
    PapertrailLog:
      stage: "logs7.papertrailapp.com:23213"
      test: "logs7.papertrailapp.com:16637"
      prod: "logs7.papertrailapp.com:16747"

  FunctionName:
    WarmUpFunction:
      test: test-warm-up-auth
      stage: stage-warm-up-auth
      prod: prod-warm-up-auth
    CreateAuthFunction:
      test: test-create-auth
      stage: stage-create-auth
      prod: prod-create-auth
    CreateAuthFunctionTargetGroup:
      test: test-create-auth-tg
      stage: stage-create-auth-tg
      prod: prod-create-auth-tg

    UpdateSettingsAuthFunction:
      test: test-update-settings-auth
      stage: stage-update-settings-auth
      prod: prod-update-settings-auth
    UpdateSettingsAuthFunctionTargetGroup:
      test: test-update-settings-auth-tg
      stage: stage-update-settings-auth-tg
      prod: prod-update-settings-auth-tg

    InternalGetUserIdFunction:
      test: test-internal-validate-token-auth
      stage: stage-internal-validate-token-auth
      prod: prod-internal-validate-token-auth

    LogoutAuthFunction:
      test: test-logout-auth
      stage: stage-logout-auth
      prod: prod-logout-auth
    LogoutAuthFunctionTargetGroup:
      test: test-logout-auth-tg
      stage: stage-logout-auth-tg
      prod: prod-logout-auth-tg

    InternalCleanDbAuthFunction:
      test: test-internal-clean-db-auth
      stage: stage-internal-clean-db-auth
      prod: prod-internal-clean-db-auth

    DeleteAuthFunction:
      test: test-delete-user-auth
      stage: stage-delete-user-auth
      prod: prod-delete-user-auth
    DeleteAuthFunctionTargetGroup:
      test: test-delete-user-auth-tg
      stage: stage-delete-user-auth-tg
      prod: prod-delete-user-auth-tg

    ClaimAuthFunction:
      test: test-claim-auth
      stage: stage-claim-auth
      prod: prod-claim-auth
    ClaimAuthFunctionTargetGroup:
      test: test-claim-user-tg
      stage: stage-claim-user-tg
      prod: prod-claim-user-tg

    InternalStreamConsumerFunction:
      test: test-internal-stream-consumer-auth
      stage: stage-internal-stream-consumer-auth
      prod: prod-internal-stream-consumer-auth

    UpdateProfileAuthFunction:
      test: test-update-profile-auth
      stage: stage-update-profile-auth
      prod: prod-update-profile-auth
    UpdateProfileAuthFunctionTargetGroup:
      test: test-update-profile-auth-tg
      stage: stage-update-profile-auth-tg
      prod: prod-update-profile-auth-tg

    LoginWithEmailAuthFunction:
      test: test-login-with-email-auth
      stage: stage-login-with-email-auth
      prod: prod-login-with-email-auth
    LoginWithEmailAuthFunctionTargetGroup:
      test: test-login-with-email-auth-tg
      stage: stage-login-with-email-auth-tg
      prod: prod-login-with-email-auth-tg

    VerifyEmailAuthFunction:
      test: test-verify-email-auth
      stage: stage-verify-email-auth
      prod: prod-verify-email-auth
    VerifyEmailAuthFunctionTargetGroup:
      test: test-verify-email-auth-tg
      stage: stage-verify-email-auth-tg
      prod: prod-verify-email-auth-tg

    ChangeEmailAuthFunction:
      test: test-change-email-auth
      stage: stage-change-email-auth
      prod: prod-change-email-auth
    ChangeEmailAuthFunctionTargetGroup:
      test: test-change-email-auth-tg
      stage: stage-change-email-auth-tg
      prod: prod-change-email-auth-tg

    GetProfileAuthFunction:
      test: test-get-profile-auth
      stage: stage-get-profile-auth
      prod: prod-get-profile-auth
    GetProfileAuthFunctionTargetGroup:
      test: test-get-profile-auth
      stage: stage-get-profile-auth
      prod: prod-get-profile-auth

Parameters:
  Env:
    Type: String
    Default: stage
    AllowedValues:
      - test
      - stage
      - prod
    Description: Env name
  CloudWatchNewUserWasCreatedMetricName:
    Type: String
    Default: NewUserWasCreated
  CloudWatchNewUserCallDeletedMetricName:
    Type: String
    Default: UserCallDeleteHimself


Globals:
    Function:
        Timeout: 300
        MemorySize: 512
        Runtime: go1.x
        Environment:
          Variables:
            ENV: !Ref Env
            PAPERTRAIL_LOG_ADDRESS: !FindInMap [LogMap, PapertrailLog, !Ref Env]
            DELIVERY_STREAM:
              Fn::ImportValue:
                !Join [ "-", [ !Ref Env, DeliveryStreamExportName] ]
            USER_PROFILE_TABLE: !Ref UserProfileTable
            USER_SETTINGS_TABLE: !Ref UserSettingsTable
            EMAIL_AUTH_TABLE: !Ref EmailAuthTable
            AUTH_CONFIRM_TABLE: !Ref AuthConfirmTable
            COMMON_STREAM:
              Fn::ImportValue:
                !Join [ "-", [ !Ref Env, CommonEventStreamExportName] ]
            INTERNAL_STREAM_NAME:
              Fn::ImportValue:
                !Join [ "-", [ !Ref Env, InternalEventStreamExportName] ]
            CLOUD_WATCH_NEW_USER_WAS_CREATED: !Ref CloudWatchNewUserWasCreatedMetricName
            CLOUD_WATCH_USER_DELETE_HIMSELF: !Ref CloudWatchNewUserCallDeletedMetricName
            BASE_CLOUD_WATCH_NAMESPACE: !Join [ "-", [ !Ref Env, auth, service] ]
        Tags:
          Company: Ringoid
          Service: auth
          Environment: !Ref Env

Resources:

  InternalCleanDbAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, InternalCleanDbAuthFunction, !Ref Env]
      Handler: clean
      CodeUri: ../clean.zip
      Description: Clean DB auth function
      Policies:
        - AWSLambdaFullAccess
        - AmazonDynamoDBFullAccess

  CreateAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, CreateAuthFunction, !Ref Env]
      Handler: create
      CodeUri: ../create-auth.zip
      Description: Create user profile auth function
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonKinesisFirehoseFullAccess
        - SecretsManagerReadWrite
        - AmazonKinesisFullAccess
        - CloudWatchFullAccess

  AuthCreateTargetGroup:
    Type: Custom::CreateTargetGroup
    Properties:
      ServiceToken:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, CustomResourceFunctionExport] ]
      CustomName: !FindInMap [FunctionName, CreateAuthFunctionTargetGroup, !Ref Env]
      CustomTargetsId: !GetAtt CreateAuthFunction.Arn
      TargetLambdaFunctionName: !Ref CreateAuthFunction

  AuthCreateListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !GetAtt AuthCreateTargetGroup.TargetGroupArn
      Conditions:
        - Field: path-pattern
          Values:
            - "/auth/create_profile"
      ListenerArn:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, ListenerArnExport] ]
      Priority: 100

  UpdateSettingsAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, UpdateSettingsAuthFunction, !Ref Env]
      Handler: update_settings
      CodeUri: ../update-settings-auth.zip
      Description: Update user's settings function
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonKinesisFirehoseFullAccess
        - SecretsManagerReadWrite
        - AmazonKinesisFullAccess

  UpdateSettingsTargetGroup:
    Type: Custom::CreateTargetGroup
    Properties:
      ServiceToken:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, CustomResourceFunctionExport] ]
      CustomName: !FindInMap [FunctionName, UpdateSettingsAuthFunctionTargetGroup, !Ref Env]
      CustomTargetsId: !GetAtt UpdateSettingsAuthFunction.Arn
      TargetLambdaFunctionName: !Ref UpdateSettingsAuthFunction

  UpdateSettingsListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !GetAtt UpdateSettingsTargetGroup.TargetGroupArn
      Conditions:
        - Field: path-pattern
          Values:
            - "/auth/update_settings"
      ListenerArn:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, ListenerArnExport] ]
      Priority: 101

  InternalGetUserIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, InternalGetUserIdFunction, !Ref Env]
      Handler: internal_get_user_id
      CodeUri: ../internal-getuserid-auth.zip
      Description: Internal function to get userId and validate AccessToken
      Policies:
        - AmazonDynamoDBFullAccess
        - SecretsManagerReadWrite
        - AmazonKinesisFullAccess

  DeleteAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, DeleteAuthFunction, !Ref Env]
      Handler: delete
      CodeUri: ../delete.zip
      Description: Delete user auth function
      Policies:
        - AmazonDynamoDBFullAccess
        - SecretsManagerReadWrite
        - AmazonKinesisFirehoseFullAccess
        - AmazonKinesisFullAccess
        - CloudWatchFullAccess

  DeleteTargetGroup:
    Type: Custom::CreateTargetGroup
    Properties:
      ServiceToken:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, CustomResourceFunctionExport] ]
      CustomName: !FindInMap [FunctionName, DeleteAuthFunctionTargetGroup, !Ref Env]
      CustomTargetsId: !GetAtt DeleteAuthFunction.Arn
      TargetLambdaFunctionName: !Ref DeleteAuthFunction

  DeleteListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !GetAtt DeleteTargetGroup.TargetGroupArn
      Conditions:
        - Field: path-pattern
          Values:
            - "/auth/delete"
      ListenerArn:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, ListenerArnExport] ]
      Priority: 103

  ClaimAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, ClaimAuthFunction, !Ref Env]
      Handler: claim
      CodeUri: ../claim.zip
      Description: Claim referral code auth function
      Policies:
        - AmazonDynamoDBFullAccess
        - SecretsManagerReadWrite
        - AmazonKinesisFirehoseFullAccess
        - AmazonKinesisFullAccess

  ClaimTargetGroup:
    Type: Custom::CreateTargetGroup
    Properties:
      ServiceToken:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, CustomResourceFunctionExport] ]
      CustomName: !FindInMap [FunctionName, ClaimAuthFunctionTargetGroup, !Ref Env]
      CustomTargetsId: !GetAtt ClaimAuthFunction.Arn
      TargetLambdaFunctionName: !Ref ClaimAuthFunction

  ClaimListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !GetAtt ClaimTargetGroup.TargetGroupArn
      Conditions:
        - Field: path-pattern
          Values:
            - "/auth/claim"
      ListenerArn:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, ListenerArnExport] ]
      Priority: 104

  UpdateProfileAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, UpdateProfileAuthFunction, !Ref Env]
      Handler: update_profile
      CodeUri: ../update_profile.zip
      Description: Update user's profile function
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonKinesisFirehoseFullAccess
        - SecretsManagerReadWrite
        - AmazonKinesisFullAccess

  UpdateProfileTargetGroup:
    Type: Custom::CreateTargetGroup
    Properties:
      ServiceToken:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, CustomResourceFunctionExport] ]
      CustomName: !FindInMap [FunctionName, UpdateProfileAuthFunctionTargetGroup, !Ref Env]
      CustomTargetsId: !GetAtt UpdateProfileAuthFunction.Arn
      TargetLambdaFunctionName: !Ref UpdateProfileAuthFunction

  UpdateProfileListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !GetAtt UpdateProfileTargetGroup.TargetGroupArn
      Conditions:
        - Field: path-pattern
          Values:
            - "/auth/update_profile"
      ListenerArn:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, ListenerArnExport] ]
      Priority: 105

  LoginWithEmailAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, LoginWithEmailAuthFunction, !Ref Env]
      Handler: login_with_email
      CodeUri: ../login_with_email.zip
      Description: Login with email function
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonKinesisFirehoseFullAccess

  LoginWithEmailAuthFunctionTargetGroup:
    Type: Custom::CreateTargetGroup
    Properties:
      ServiceToken:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, CustomResourceFunctionExport] ]
      CustomName: !FindInMap [FunctionName, LoginWithEmailAuthFunctionTargetGroup, !Ref Env]
      CustomTargetsId: !GetAtt LoginWithEmailAuthFunction.Arn
      TargetLambdaFunctionName: !Ref LoginWithEmailAuthFunction

  LoginWithEmailAuthFunctionListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !GetAtt LoginWithEmailAuthFunctionTargetGroup.TargetGroupArn
      Conditions:
        - Field: path-pattern
          Values:
            - "/auth/login_with_email"
      ListenerArn:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, ListenerArnExport] ]
      Priority: 106

  VerifyEmailAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, VerifyEmailAuthFunction, !Ref Env]
      Handler: verify_email
      CodeUri: ../verify_email.zip
      Description: Verify email function
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonKinesisFirehoseFullAccess
        - SecretsManagerReadWrite

  VerifyEmailAuthFunctionTargetGroup:
    Type: Custom::CreateTargetGroup
    Properties:
      ServiceToken:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, CustomResourceFunctionExport] ]
      CustomName: !FindInMap [FunctionName, VerifyEmailAuthFunctionTargetGroup, !Ref Env]
      CustomTargetsId: !GetAtt VerifyEmailAuthFunction.Arn
      TargetLambdaFunctionName: !Ref VerifyEmailAuthFunction

  VerifyEmailAuthFunctionListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !GetAtt VerifyEmailAuthFunctionTargetGroup.TargetGroupArn
      Conditions:
        - Field: path-pattern
          Values:
            - "/auth/verify_email"
      ListenerArn:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, ListenerArnExport] ]
      Priority: 107

  ChangeEmailAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, ChangeEmailAuthFunction, !Ref Env]
      Handler: change_email
      CodeUri: ../change_email.zip
      Description: Change email function
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonKinesisFirehoseFullAccess
        - SecretsManagerReadWrite
        - AmazonKinesisFullAccess

  ChangeEmailAuthFunctionTargetGroup:
    Type: Custom::CreateTargetGroup
    Properties:
      ServiceToken:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, CustomResourceFunctionExport] ]
      CustomName: !FindInMap [FunctionName, ChangeEmailAuthFunctionTargetGroup, !Ref Env]
      CustomTargetsId: !GetAtt ChangeEmailAuthFunction.Arn
      TargetLambdaFunctionName: !Ref ChangeEmailAuthFunction

  ChangeEmailAuthFunctionListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !GetAtt ChangeEmailAuthFunctionTargetGroup.TargetGroupArn
      Conditions:
        - Field: path-pattern
          Values:
            - "/auth/change_email"
      ListenerArn:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, ListenerArnExport] ]
      Priority: 108

  GetProfileAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, GetProfileAuthFunction, !Ref Env]
      Handler: get_profile
      CodeUri: ../get_profile.zip
      Description: Get profile function
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonKinesisFirehoseFullAccess
        - SecretsManagerReadWrite
        - AmazonKinesisFullAccess

  GetProfileAuthFunctionTargetGroup:
    Type: Custom::CreateTargetGroup
    Properties:
      ServiceToken:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, CustomResourceFunctionExport] ]
      CustomName: !FindInMap [FunctionName, GetProfileAuthFunctionTargetGroup, !Ref Env]
      CustomTargetsId: !GetAtt GetProfileAuthFunction.Arn
      TargetLambdaFunctionName: !Ref GetProfileAuthFunction

  GetProfileAuthFunctionListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !GetAtt GetProfileAuthFunctionTargetGroup.TargetGroupArn
      Conditions:
        - Field: path-pattern
          Values:
            - "/auth/get_profile"
      ListenerArn:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, ListenerArnExport] ]
      Priority: 109

  InternalStreamConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, InternalStreamConsumerFunction, !Ref Env]
      Handler: handle_stream
      CodeUri: ../handle_stream.zip
      Description: Consumer for Kinesis stream
      Policies:
        - AmazonKinesisFullAccess
        - AmazonDynamoDBFullAccess
      Events:
        CommonEventStreamEvent:
          Type: Kinesis
          Properties:
            Stream:
              Fn::ImportValue:
                !Join [ "-", [ !Ref Env, InternalEventStreamExport] ]
            StartingPosition: TRIM_HORIZON
            BatchSize: 1

  UserProfileTable:
    Type: AWS::DynamoDB::Table
    Properties:
          TableName: !Join [ "-", [ !Ref Env, Auth, UserProfileTable] ]
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            -
              AttributeName: user_id
              AttributeType: S
          KeySchema:
            -
              AttributeName: user_id
              KeyType: HASH
          Tags:
            - Key: Company
              Value: Ringoid
            - Key: Service
              Value: auth
            - Key: Environment
              Value: !Ref Env

  EmailAuthTable:
    Type: AWS::DynamoDB::Table
    Properties:
          TableName: !Join [ "-", [ !Ref Env, Auth, EmailAuthTable] ]
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            -
              AttributeName: email
              AttributeType: S
          KeySchema:
            -
              AttributeName: email
              KeyType: HASH
          Tags:
            - Key: Company
              Value: Ringoid
            - Key: Service
              Value: auth
            - Key: Environment
              Value: !Ref Env

  AuthConfirmTable:
    Type: AWS::DynamoDB::Table
    Properties:
          TableName: !Join [ "-", [ !Ref Env, Auth, AuthConfirmTable] ]
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            -
              AttributeName: email
              AttributeType: S
          KeySchema:
            -
              AttributeName: email
              KeyType: HASH
          Tags:
            - Key: Company
              Value: Ringoid
            - Key: Service
              Value: auth
            - Key: Environment
              Value: !Ref Env

  UserSettingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
          TableName: !Join [ "-", [ !Ref Env, Auth, UserSettings] ]
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            -
              AttributeName: user_id
              AttributeType: S
          KeySchema:
            -
              AttributeName: user_id
              KeyType: HASH
          Tags:
            - Key: Company
              Value: Ringoid
            - Key: Service
              Value: auth
            - Key: Environment
              Value: !Ref Env

Outputs:
  InternalGetUserIdFunctionExport:
    Value: !FindInMap [FunctionName, InternalGetUserIdFunction, !Ref Env]
    Export:
      Name: !Join [ "-", [ !Ref Env, InternalGetUserIdFunctionExport] ]
  InternalCleanDbAuthFunctionExport:
    Value: !FindInMap [FunctionName, InternalCleanDbAuthFunction, !Ref Env]
    Export:
      Name: !Join [ "-", [ !Ref Env, InternalCleanDbAuthFunctionExport] ]
