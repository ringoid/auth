AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Auth Service Stack


Mappings:
  LogMap:
    PapertrailLog:
      stage: "logs7.papertrailapp.com:23213"
      test: "logs7.papertrailapp.com:16637"
      prod: "logs7.papertrailapp.com:16747"

  FunctionName:
    WarmUpFunction:
      test: test-warm-up-auth
      stage: stage-warm-up-auth
      prod: prod-warm-up-auth
    CreateAuthFunction:
      test: test-create-auth
      stage: stage-create-auth
      prod: prod-create-auth
    CreateAuthFunctionTargetGroup:
      test: test-create-auth-tg
      stage: stage-create-auth-tg
      prod: prod-create-auth-tg

    UpdateSettingsAuthFunction:
      test: test-update-settings-auth
      stage: stage-update-settings-auth
      prod: prod-update-settings-auth
    UpdateSettingsAuthFunctionTargetGroup:
      test: test-update-settings-auth-tg
      stage: stage-update-settings-auth-tg
      prod: prod-update-settings-auth-tg

    GetSettingsAuthFunction:
      test: test-get-settings-auth
      stage: stage-get-settings-auth
      prod: prod-get-settings-auth
    GetSettingsAuthFunctionTargetGroup:
      test: test-get-settings-auth-tg
      stage: stage-get-settings-auth-tg
      prod: prod-get-settings-auth-tg

    InternalGetUserIdFunction:
      test: test-internal-validate-token-auth
      stage: stage-internal-validate-token-auth
      prod: prod-internal-validate-token-auth

    LogoutAuthFunction:
      test: test-logout-auth
      stage: stage-logout-auth
      prod: prod-logout-auth
    LogoutAuthFunctionTargetGroup:
      test: test-logout-auth-tg
      stage: stage-logout-auth-tg
      prod: prod-logout-auth-tg

    InternalCleanDbAuthFunction:
      test: test-internal-clean-db-auth
      stage: stage-internal-clean-db-auth
      prod: prod-internal-clean-db-auth

    DeleteAuthFunction:
      test: test-delete-user-auth
      stage: stage-delete-user-auth
      prod: prod-delete-user-auth
    DeleteAuthFunctionTargetGroup:
      test: test-delete-user-auth-tg
      stage: stage-delete-user-auth-tg
      prod: prod-delete-user-auth-tg

    InternalStreamConsumerFunction:
      test: test-internal-stream-consumer-auth
      stage: stage-internal-stream-consumer-auth
      prod: prod-internal-stream-consumer-auth

Parameters:
  Env:
    Type: String
    Default: stage
    AllowedValues:
      - test
      - stage
      - prod
    Description: Env name
  CloudWatchNewUserWasCreatedMetricName:
    Type: String
    Default: NewUserWasCreated
  CloudWatchNewUserCallDeletedMetricName:
    Type: String
    Default: UserCallDeleteHimself


Globals:
    Function:
        Timeout: 300
        MemorySize: 512
        Runtime: go1.x
        Environment:
          Variables:
            ENV: !Ref Env
            PAPERTRAIL_LOG_ADDRESS: !FindInMap [LogMap, PapertrailLog, !Ref Env]
            DELIVERY_STREAM:
              Fn::ImportValue:
                !Join [ "-", [ !Ref Env, DeliveryStreamExportName] ]
            USER_PROFILE_TABLE: !Ref UserProfileTable
            USER_SETTINGS_TABLE: !Ref UserSettingsTable
            COMMON_STREAM:
              Fn::ImportValue:
                !Join [ "-", [ !Ref Env, CommonEventStreamExportName] ]
            INTERNAL_STREAM_NAME:
              Fn::ImportValue:
                !Join [ "-", [ !Ref Env, InternalEventStreamExportName] ]
            CLOUD_WATCH_NEW_USER_WAS_CREATED: !Ref CloudWatchNewUserWasCreatedMetricName
            CLOUD_WATCH_USER_DELETE_HIMSELF: !Ref CloudWatchNewUserCallDeletedMetricName
            BASE_CLOUD_WATCH_NAMESPACE: !Join [ "-", [ !Ref Env, auth, service] ]
        Tags:
          Company: Ringoid
          Service: auth
          Environment: !Ref Env

Resources:

  InternalCleanDbAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, InternalCleanDbAuthFunction, !Ref Env]
      Handler: clean
      CodeUri: ../clean.zip
      Description: Clean DB auth function
      Policies:
        - AWSLambdaFullAccess
        - AmazonDynamoDBFullAccess

  CreateAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, CreateAuthFunction, !Ref Env]
      Handler: create
      CodeUri: ../create-auth.zip
      Description: Create user profile auth function
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonKinesisFirehoseFullAccess
        - SecretsManagerReadWrite
        - AmazonKinesisFullAccess
        - CloudWatchFullAccess

  AuthCreateTargetGroup:
    Type: Custom::CreateTargetGroup
    Properties:
      ServiceToken:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, CustomResourceFunctionExport] ]
      CustomName: !FindInMap [FunctionName, CreateAuthFunctionTargetGroup, !Ref Env]
      CustomTargetsId: !GetAtt CreateAuthFunction.Arn
      TargetLambdaFunctionName: !Ref CreateAuthFunction

  AuthCreateListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !GetAtt AuthCreateTargetGroup.TargetGroupArn
      Conditions:
        - Field: path-pattern
          Values:
            - "/auth/create_profile"
      ListenerArn:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, ListenerArnExport] ]
      Priority: 100

  UpdateSettingsAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, UpdateSettingsAuthFunction, !Ref Env]
      Handler: update_settings
      CodeUri: ../update-settings-auth.zip
      Description: Update user's settings function
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonKinesisFirehoseFullAccess
        - SecretsManagerReadWrite
        - AmazonKinesisFullAccess

  UpdateSettingsTargetGroup:
    Type: Custom::CreateTargetGroup
    Properties:
      ServiceToken:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, CustomResourceFunctionExport] ]
      CustomName: !FindInMap [FunctionName, UpdateSettingsAuthFunctionTargetGroup, !Ref Env]
      CustomTargetsId: !GetAtt UpdateSettingsAuthFunction.Arn
      TargetLambdaFunctionName: !Ref UpdateSettingsAuthFunction

  UpdateSettingsListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !GetAtt UpdateSettingsTargetGroup.TargetGroupArn
      Conditions:
        - Field: path-pattern
          Values:
            - "/auth/update_settings"
      ListenerArn:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, ListenerArnExport] ]
      Priority: 101


  GetSettingsAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, GetSettingsAuthFunction, !Ref Env]
      Handler: get_settings
      CodeUri: ../get-settings-auth.zip
      Description: Get user's settings function
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonKinesisFirehoseFullAccess
        - SecretsManagerReadWrite
        - AmazonKinesisFullAccess

  GetSettingsTargetGroup:
    Type: Custom::CreateTargetGroup
    Properties:
      ServiceToken:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, CustomResourceFunctionExport] ]
      CustomName: !FindInMap [FunctionName, GetSettingsAuthFunctionTargetGroup, !Ref Env]
      CustomTargetsId: !GetAtt GetSettingsAuthFunction.Arn
      TargetLambdaFunctionName: !Ref GetSettingsAuthFunction

  GetSettingsListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !GetAtt GetSettingsTargetGroup.TargetGroupArn
      Conditions:
        - Field: path-pattern
          Values:
            - "/auth/get_settings"
      ListenerArn:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, ListenerArnExport] ]
      Priority: 102


  InternalGetUserIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, InternalGetUserIdFunction, !Ref Env]
      Handler: internal_get_user_id
      CodeUri: ../internal-getuserid-auth.zip
      Description: Internal function to get userId and validate AccessToken
      Policies:
        - AmazonDynamoDBFullAccess
        - SecretsManagerReadWrite
        - AmazonKinesisFullAccess

  DeleteAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, DeleteAuthFunction, !Ref Env]
      Handler: delete
      CodeUri: ../delete.zip
      Description: Delete user auth function
      Policies:
        - AmazonDynamoDBFullAccess
        - SecretsManagerReadWrite
        - AmazonKinesisFirehoseFullAccess
        - AmazonKinesisFullAccess
        - CloudWatchFullAccess

  DeleteTargetGroup:
    Type: Custom::CreateTargetGroup
    Properties:
      ServiceToken:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, CustomResourceFunctionExport] ]
      CustomName: !FindInMap [FunctionName, DeleteAuthFunctionTargetGroup, !Ref Env]
      CustomTargetsId: !GetAtt DeleteAuthFunction.Arn
      TargetLambdaFunctionName: !Ref DeleteAuthFunction

  DeleteListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !GetAtt DeleteTargetGroup.TargetGroupArn
      Conditions:
        - Field: path-pattern
          Values:
            - "/auth/delete"
      ListenerArn:
        Fn::ImportValue:
          !Join [ "-", [ !Ref Env, ListenerArnExport] ]
      Priority: 103


  InternalStreamConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, InternalStreamConsumerFunction, !Ref Env]
      Handler: handle_stream
      CodeUri: ../handle_stream.zip
      Description: Consumer for Kinesis stream
      Policies:
        - AmazonKinesisFullAccess
        - AmazonDynamoDBFullAccess
      Events:
        CommonEventStreamEvent:
          Type: Kinesis
          Properties:
            Stream:
              Fn::ImportValue:
                !Join [ "-", [ !Ref Env, InternalEventStreamExport] ]
            StartingPosition: TRIM_HORIZON
            BatchSize: 1

  UserProfileTable:
    Type: AWS::DynamoDB::Table
    Properties:
          TableName: !Join [ "-", [ !Ref Env, Auth, UserProfileTable] ]
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            -
              AttributeName: user_id
              AttributeType: S
          KeySchema:
            -
              AttributeName: user_id
              KeyType: HASH
          Tags:
            - Key: Company
              Value: Ringoid
            - Key: Service
              Value: auth
            - Key: Environment
              Value: !Ref Env

  UserSettingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
          TableName: !Join [ "-", [ !Ref Env, Auth, UserSettings] ]
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            -
              AttributeName: user_id
              AttributeType: S
          KeySchema:
            -
              AttributeName: user_id
              KeyType: HASH
          Tags:
            - Key: Company
              Value: Ringoid
            - Key: Service
              Value: auth
            - Key: Environment
              Value: !Ref Env

Outputs:
  InternalGetUserIdFunctionExport:
    Value: !FindInMap [FunctionName, InternalGetUserIdFunction, !Ref Env]
    Export:
      Name: !Join [ "-", [ !Ref Env, InternalGetUserIdFunctionExport] ]
  InternalCleanDbAuthFunctionExport:
    Value: !FindInMap [FunctionName, InternalCleanDbAuthFunction, !Ref Env]
    Export:
      Name: !Join [ "-", [ !Ref Env, InternalCleanDbAuthFunctionExport] ]
